{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"geoconverter \u00b6 Application for converting between geospatial raster formats. Requirements \u00b6 gdal >= 3.1 Python >= 3.6 Documentation \u00b6 Project documentation can be found here","title":"Home"},{"location":"index.html#geoconverter","text":"Application for converting between geospatial raster formats.","title":"geoconverter"},{"location":"index.html#requirements","text":"gdal >= 3.1 Python >= 3.6","title":"Requirements"},{"location":"index.html#documentation","text":"Project documentation can be found here","title":"Documentation"},{"location":"SUMMARY.html","text":"Home Installation Deployment Usage API Reference","title":"SUMMARY"},{"location":"deployment.html","text":"Deployment Following the installation guide , you should now have a directory under geoconverter/dist which contains the executable and its required libraries. Some considerations: If you used python>=3.8 while creating the application you might need to set the environment variable USE_PATH_FOR_GDAL_PYTHON=YES before running the application. If the target system is Windows, ensure the gdal library is not installed as it can lead to DLLs conflicting.","title":"Deployment"},{"location":"installation.html","text":"Installation Setup environment \u00b6 geoconverter has only two real requirements: gdal > 3.1 and Python >= 3.6 . Use conda to install these dependencies and setup your development environment. conda install -n geo gdal>=3.1.0 pyinstaller python=3.7 conda activate geo Clone repository \u00b6 The source for geoconverter can be downloaded from the Github repo . git clone --recurse-submodules https://github.com/ashnair1/geoconverter.git Using gdal >= 3.4 To work with gdal>=3.4 , you will need to switch to the gdal3.4 branch of cesium-terrain-builder . Follow the instructions given below: cd geoconverter # Edit submodule branch git config --file=.gitmodules submodule.cesium-terrain-builder.branch gdal3.4 # Sync and update the submodule git submodule update --remote Important For Windows users, it is highly recommended to use conda to install gdal. The Windows build of geoconverter was created using gdal from conda-forge channel. conda-forge builds on Windows use MSVC compiler to maintain compatibility with Python so users will need to have it installed as well. The installation instructions below assume it is being run from the Developer Tools x64 cmd prompt . For Linux users, depending on your gdal installation you will need to specify additional directives to cmake so that it can find it correctly. These directives will be required if you used conda to install gdal. Refer to ctb docs for more information. Create the cesium terrain builder (ctb) executables \u00b6 Windows Linux cd geoconverter && mkdir cesium-terrain-builder\\build cmake -DCMAKE_BUILD_TYPE=Release ^ - G \"NMake Makefiles\" ^ - S cesium-terrain-builder ^ - B cesium-terrain-builder\\build && cmake --build cesium-terrain-builder\\build cd geoconverter && mkdir cesium-terrain-builder/build cmake -DCMAKE_BUILD_TYPE = Release \\ -DGDAL_LIBRARY_DIR = $CONDA_PREFIX /lib \\ -DGDAL_LIBRARY = $CONDA_PREFIX /lib/libgdal.so \\ -DGDAL_INCLUDE_DIR = $CONDA_PREFIX /include \\ -S cesium-terrain-builder \\ -B cesium-terrain-builder/build && cmake --build cesium-terrain-builder/build Create the application \u00b6 Ensure PROJ_LIB environment variable is set. If you're working within a conda environment, this should already be set. Windows Linux pyinstaller --clean --onedir geoconverter/app.py ^ - -add-data \"cesium-terrain-builder\\build\\tools\\ctb-tile.exe;.\" ^ - -add-binary \"cesium-terrain-builder\\build\\src\\ctb.dll;.\" ^ - -add-data \" %PROJ_LIB% ;proj\" pyinstaller --clean --onedir geoconverter/app.py \\ --add-data \"cesium-terrain-builder/build/tools/ctb-tile:.\" \\ --add-binary \"cesium-terrain-builder/build/src/libctb.so:.\" \\ --add-data \" $PROJ_LIB :proj\"","title":"Installation"},{"location":"installation.html#setup-environment","text":"geoconverter has only two real requirements: gdal > 3.1 and Python >= 3.6 . Use conda to install these dependencies and setup your development environment. conda install -n geo gdal>=3.1.0 pyinstaller python=3.7 conda activate geo","title":"Setup environment"},{"location":"installation.html#clone-repository","text":"The source for geoconverter can be downloaded from the Github repo . git clone --recurse-submodules https://github.com/ashnair1/geoconverter.git Using gdal >= 3.4 To work with gdal>=3.4 , you will need to switch to the gdal3.4 branch of cesium-terrain-builder . Follow the instructions given below: cd geoconverter # Edit submodule branch git config --file=.gitmodules submodule.cesium-terrain-builder.branch gdal3.4 # Sync and update the submodule git submodule update --remote Important For Windows users, it is highly recommended to use conda to install gdal. The Windows build of geoconverter was created using gdal from conda-forge channel. conda-forge builds on Windows use MSVC compiler to maintain compatibility with Python so users will need to have it installed as well. The installation instructions below assume it is being run from the Developer Tools x64 cmd prompt . For Linux users, depending on your gdal installation you will need to specify additional directives to cmake so that it can find it correctly. These directives will be required if you used conda to install gdal. Refer to ctb docs for more information.","title":"Clone repository"},{"location":"installation.html#create-the-cesium-terrain-builder-ctb-executables","text":"Windows Linux cd geoconverter && mkdir cesium-terrain-builder\\build cmake -DCMAKE_BUILD_TYPE=Release ^ - G \"NMake Makefiles\" ^ - S cesium-terrain-builder ^ - B cesium-terrain-builder\\build && cmake --build cesium-terrain-builder\\build cd geoconverter && mkdir cesium-terrain-builder/build cmake -DCMAKE_BUILD_TYPE = Release \\ -DGDAL_LIBRARY_DIR = $CONDA_PREFIX /lib \\ -DGDAL_LIBRARY = $CONDA_PREFIX /lib/libgdal.so \\ -DGDAL_INCLUDE_DIR = $CONDA_PREFIX /include \\ -S cesium-terrain-builder \\ -B cesium-terrain-builder/build && cmake --build cesium-terrain-builder/build","title":"Create the cesium terrain builder (ctb) executables"},{"location":"installation.html#create-the-application","text":"Ensure PROJ_LIB environment variable is set. If you're working within a conda environment, this should already be set. Windows Linux pyinstaller --clean --onedir geoconverter/app.py ^ - -add-data \"cesium-terrain-builder\\build\\tools\\ctb-tile.exe;.\" ^ - -add-binary \"cesium-terrain-builder\\build\\src\\ctb.dll;.\" ^ - -add-data \" %PROJ_LIB% ;proj\" pyinstaller --clean --onedir geoconverter/app.py \\ --add-data \"cesium-terrain-builder/build/tools/ctb-tile:.\" \\ --add-binary \"cesium-terrain-builder/build/src/libctb.so:.\" \\ --add-data \" $PROJ_LIB :proj\"","title":"Create the application"},{"location":"usage.html","text":"Usage Windows Linux I/O tabs \u00b6 The GUI consists of three tabs for specifying input and output: File : Input is a single file and output is a single file Directory : Input is a directory and output is a directory DEM : Input is a DEM raster and output is a directory Options \u00b6 There are three main settings in the conversion process: Dtype : Output dtype format. Supports all valid gdal datatypes. Select Native if you want the output dtype to be same as that of input. Format : Output file format. Select Native if you want the output format to be same as that of input. Supports the following formats: Raster: * Cloud Optimized GeoTiff (COG), * GeoTiff (GTiff), * JPEG2000 (based on OpenJPEG library), * Erdas Imagine (IMG). 3D: * Cesium Terrain files (Terrain) * Quantized Mesh (Mesh) Contrast Enhancement : Apply percentile stretch to output raster.","title":"Usage"},{"location":"usage.html#io-tabs","text":"The GUI consists of three tabs for specifying input and output: File : Input is a single file and output is a single file Directory : Input is a directory and output is a directory DEM : Input is a DEM raster and output is a directory","title":"I/O tabs"},{"location":"usage.html#options","text":"There are three main settings in the conversion process: Dtype : Output dtype format. Supports all valid gdal datatypes. Select Native if you want the output dtype to be same as that of input. Format : Output file format. Select Native if you want the output format to be same as that of input. Supports the following formats: Raster: * Cloud Optimized GeoTiff (COG), * GeoTiff (GTiff), * JPEG2000 (based on OpenJPEG library), * Erdas Imagine (IMG). 3D: * Cesium Terrain files (Terrain) * Quantized Mesh (Mesh) Contrast Enhancement : Apply percentile stretch to output raster.","title":"Options"},{"location":"reference/SUMMARY.html","text":"geoconverter app gdal_convert utils","title":"SUMMARY"},{"location":"reference/app.html","text":"geoconverter.app \u00b6 showtraceback ( widget , msg ) \u00b6 Display error traceback. Parameters: Name Type Description Default widget DefaultTab current widget required msg str error message to be displayed. required Source code in geoconverter/app.py def showtraceback ( widget : \"DefaultTab\" , msg : str ) -> None : \"\"\"Display error traceback. Args: widget (DefaultTab): current widget msg (str): error message to be displayed. \"\"\" root : Union [ tk . Tk , tk . Toplevel ] = widget . winfo_toplevel () errWindow = tk . Toplevel ( root ) errWindow . title ( \"Traceback\" ) # sets the geometry of toplevel errWindow . geometry ( \"500x500\" ) T = tk . Text ( errWindow , height = 100 , width = 500 ) T . pack () T . insert ( tk . END , msg ) T . configure ( state = \"disabled\" )","title":"app"},{"location":"reference/app.html#geoconverter.app","text":"","title":"app"},{"location":"reference/app.html#geoconverter.app.showtraceback","text":"Display error traceback. Parameters: Name Type Description Default widget DefaultTab current widget required msg str error message to be displayed. required Source code in geoconverter/app.py def showtraceback ( widget : \"DefaultTab\" , msg : str ) -> None : \"\"\"Display error traceback. Args: widget (DefaultTab): current widget msg (str): error message to be displayed. \"\"\" root : Union [ tk . Tk , tk . Toplevel ] = widget . winfo_toplevel () errWindow = tk . Toplevel ( root ) errWindow . title ( \"Traceback\" ) # sets the geometry of toplevel errWindow . geometry ( \"500x500\" ) T = tk . Text ( errWindow , height = 100 , width = 500 ) T . pack () T . insert ( tk . END , msg ) T . configure ( state = \"disabled\" )","title":"showtraceback()"},{"location":"reference/gdal_convert.html","text":"geoconverter.gdal_convert \u00b6 Rescales imagery to specified bit resolution and converts to specified format. Requires GDAL>=3.1 Usage: python geoconverter/gdal_convert.py -i ./data/in/a.tif python geoconverter/gdal_convert.py -i ./data/in/a.tif -o out/a_cog.tif -of COG python geoconverter/gdal_convert.py -i ./data/in/a.tif -of COG -or 0 255 python geoconverter/gdal_convert.py -i ./data/in/ -o ./data/out/ -of JPEG -b 5,3,2 python geoconverter/gdal_convert.py -i ./data/in/ -o ./data/out/ -of JPEG -b 5,3,2 stretch 2 98 Full disclosure: This can be done using gdal_translate but you will need to manually set the scale params","title":"gdal_convert"},{"location":"reference/gdal_convert.html#geoconverter.gdal_convert","text":"Rescales imagery to specified bit resolution and converts to specified format. Requires GDAL>=3.1 Usage: python geoconverter/gdal_convert.py -i ./data/in/a.tif python geoconverter/gdal_convert.py -i ./data/in/a.tif -o out/a_cog.tif -of COG python geoconverter/gdal_convert.py -i ./data/in/a.tif -of COG -or 0 255 python geoconverter/gdal_convert.py -i ./data/in/ -o ./data/out/ -of JPEG -b 5,3,2 python geoconverter/gdal_convert.py -i ./data/in/ -o ./data/out/ -of JPEG -b 5,3,2 stretch 2 98 Full disclosure: This can be done using gdal_translate but you will need to manually set the scale params","title":"gdal_convert"},{"location":"reference/utils.html","text":"geoconverter.utils \u00b6 Utilities for geoconverter get_dtype ( input ) \u00b6 Get dtype of raster. Parameters: Name Type Description Default input Union[Path, str] Path to raster required Returns: Type Description str Raster dtype Source code in geoconverter/utils.py def get_dtype ( input : Union [ Path , str ]) -> str : \"\"\"Get dtype of raster. Args: input (Union[Path, str]): Path to raster Returns: str: Raster dtype \"\"\" ds = gdal . Open ( str ( input )) DataType = ds . GetRasterBand ( 1 ) . DataType dtype : str = gdal . GetDataTypeName ( DataType ) ds = None return dtype get_extension ( input , format ) \u00b6 Get extension for specified format. Parameters: Name Type Description Default input Union[Path, str] Path to raster required format str Raster format required Exceptions: Type Description AssertionError if specified format is not a valid GDAL driver AssertionError if specified format does not have a valid extension Returns: Type Description str File extension Source code in geoconverter/utils.py def get_extension ( input : Union [ Path , str ], format : str ) -> str : \"\"\"Get extension for specified format. Args: input (Union[Path, str]): Path to raster format (str): Raster format Raises: AssertionError: if specified format is not a valid GDAL driver AssertionError: if specified format does not have a valid extension Returns: str: File extension \"\"\" if format . lower () != \"native\" : drv = gdal . GetDriverByName ( format ) else : ds = gdal . Open ( str ( input )) drv = ds . GetDriver () del ds if not drv : raise AssertionError ( \"Invalid Driver. Refer GDAL documentation \" \"for accepted list of raster drivers\" ) if drv . GetMetadataItem ( gdal . DCAP_RASTER ): ext : str = ( \"tif\" if format == \"COG\" else drv . GetMetadata_Dict () . get ( \"DMD_EXTENSION\" ) ) if not ext : raise AssertionError ( f \"Specified output format { format } is not a raster format\" ) return ext parse_files ( input , output , format , output_stub = 'converted' ) \u00b6 Parse specified input (file/dir) and output (file/dir) Parameters: Name Type Description Default input str Path to raster or directory of rasters required output str Path to output raster or directory required format str Raster format required output_stub str String added to output filename. Defaults to \"converted\". 'converted' Returns: Type Description Tuple[List[Path], List[Path]] List of input and output paths Source code in geoconverter/utils.py def parse_files ( input : str , output : str , format : str , output_stub : str = \"converted\" ) -> Tuple [ List [ Path ], List [ Path ]]: \"\"\"Parse specified input (file/dir) and output (file/dir) Args: input (str): Path to raster or directory of rasters output (str): Path to output raster or directory format (str): Raster format output_stub (str, optional): String added to output filename. Defaults to \"converted\". Returns: Tuple[List[Path], List[Path]]: List of input and output paths \"\"\" assert Path ( input ) . exists () and input != \"\" inpath = Path ( input ) outpath = Path ( output ) if output else None if inpath . is_dir (): # If input is a dir, then output dir must be specified outpath = Path ( output ) assert outpath . is_dir () files = [] outpaths = [] for f in inpath . rglob ( \"*\" ): # Skip auxiliary files and subdirectories if f . suffix . lower () == \".xml\" or f . is_dir (): continue files . append ( f ) ext = get_extension ( f , format ) outpaths . append ( outpath / f \" { f . stem } _ { output_stub } . { ext } \" ) elif inpath . is_file (): ext = get_extension ( inpath , format ) outpaths = ( [ outpath ] if outpath else [ inpath . parent / Path ( f \" { output_stub } . { ext } \" )] ) assert inpath . suffix . lower () != \".xml\" files = [ inpath ] return files , outpaths","title":"utils"},{"location":"reference/utils.html#geoconverter.utils","text":"Utilities for geoconverter","title":"utils"},{"location":"reference/utils.html#geoconverter.utils.get_dtype","text":"Get dtype of raster. Parameters: Name Type Description Default input Union[Path, str] Path to raster required Returns: Type Description str Raster dtype Source code in geoconverter/utils.py def get_dtype ( input : Union [ Path , str ]) -> str : \"\"\"Get dtype of raster. Args: input (Union[Path, str]): Path to raster Returns: str: Raster dtype \"\"\" ds = gdal . Open ( str ( input )) DataType = ds . GetRasterBand ( 1 ) . DataType dtype : str = gdal . GetDataTypeName ( DataType ) ds = None return dtype","title":"get_dtype()"},{"location":"reference/utils.html#geoconverter.utils.get_extension","text":"Get extension for specified format. Parameters: Name Type Description Default input Union[Path, str] Path to raster required format str Raster format required Exceptions: Type Description AssertionError if specified format is not a valid GDAL driver AssertionError if specified format does not have a valid extension Returns: Type Description str File extension Source code in geoconverter/utils.py def get_extension ( input : Union [ Path , str ], format : str ) -> str : \"\"\"Get extension for specified format. Args: input (Union[Path, str]): Path to raster format (str): Raster format Raises: AssertionError: if specified format is not a valid GDAL driver AssertionError: if specified format does not have a valid extension Returns: str: File extension \"\"\" if format . lower () != \"native\" : drv = gdal . GetDriverByName ( format ) else : ds = gdal . Open ( str ( input )) drv = ds . GetDriver () del ds if not drv : raise AssertionError ( \"Invalid Driver. Refer GDAL documentation \" \"for accepted list of raster drivers\" ) if drv . GetMetadataItem ( gdal . DCAP_RASTER ): ext : str = ( \"tif\" if format == \"COG\" else drv . GetMetadata_Dict () . get ( \"DMD_EXTENSION\" ) ) if not ext : raise AssertionError ( f \"Specified output format { format } is not a raster format\" ) return ext","title":"get_extension()"},{"location":"reference/utils.html#geoconverter.utils.parse_files","text":"Parse specified input (file/dir) and output (file/dir) Parameters: Name Type Description Default input str Path to raster or directory of rasters required output str Path to output raster or directory required format str Raster format required output_stub str String added to output filename. Defaults to \"converted\". 'converted' Returns: Type Description Tuple[List[Path], List[Path]] List of input and output paths Source code in geoconverter/utils.py def parse_files ( input : str , output : str , format : str , output_stub : str = \"converted\" ) -> Tuple [ List [ Path ], List [ Path ]]: \"\"\"Parse specified input (file/dir) and output (file/dir) Args: input (str): Path to raster or directory of rasters output (str): Path to output raster or directory format (str): Raster format output_stub (str, optional): String added to output filename. Defaults to \"converted\". Returns: Tuple[List[Path], List[Path]]: List of input and output paths \"\"\" assert Path ( input ) . exists () and input != \"\" inpath = Path ( input ) outpath = Path ( output ) if output else None if inpath . is_dir (): # If input is a dir, then output dir must be specified outpath = Path ( output ) assert outpath . is_dir () files = [] outpaths = [] for f in inpath . rglob ( \"*\" ): # Skip auxiliary files and subdirectories if f . suffix . lower () == \".xml\" or f . is_dir (): continue files . append ( f ) ext = get_extension ( f , format ) outpaths . append ( outpath / f \" { f . stem } _ { output_stub } . { ext } \" ) elif inpath . is_file (): ext = get_extension ( inpath , format ) outpaths = ( [ outpath ] if outpath else [ inpath . parent / Path ( f \" { output_stub } . { ext } \" )] ) assert inpath . suffix . lower () != \".xml\" files = [ inpath ] return files , outpaths","title":"parse_files()"}]}